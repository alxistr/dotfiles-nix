set surround
set clipboard=autoselect
"
let mapleader = " "

"
" generic
"

map <leader>fs :action SaveDocument<CR>
map <leader>s/ :action Find<CR>
map <leader>sf :action SearchEverywhere<CR>
map <leader><leader> :action SearchEverywhere<CR>
map <leader>o :action OverrideMethods<CR>
map <leader>r :action RenameElement<CR>
map <leader>t :action ReformatCode<CR>
map <leader>e :action RecentFiles<CR>
map <leader><enter> :action GotoDeclaration<CR>
map <leader>bd :action CloseContent<CR>
map <leader>su :action FindUsages<CR>
vmap <leader>y "+y

"
" git
"

map <leader>gs :action Git.Stash<CR>
map <leader>gu :action Git.Unstash<CR>

"
" cursive
"

map <leader>ll :action :cursive.repl.actions/run-top-sexp<CR>
map <leader>lf :action :cursive.repl.actions/load-file<CR>
map <leader>lm :action :cursive.repl.actions/macroexpansion<CR>
map <leader>lc :actionlist :cursive<CR>

map <leader>nn :action :cursive.testing.actions/run-ns-tests<CR>
map <leader>mm :action :cursive.testing.actions/run-single-test<CR>
map <leader>ml :action :cursive.testing.actions/rerun-last-test<CR>

map <leader>gr :action :cursive.repl.actions/jump-to-repl<CR>
map <leader>go :action :cursive.repl.actions/jump-to-output<CR>

map <leader>nf :action Clojure.ClojureFile<CR>

"
"
"
map <leader>hg :action Haskell.SendToGhci<CR>
map <leader>hl :action Haskell.Ghci.LoadModule<CR>

"
" notebook
"

" map <leader><CR> :action NotebookRunCellAction<CR>
" map <leader>aa :action NotebookRunAllAboveAction<CR>
