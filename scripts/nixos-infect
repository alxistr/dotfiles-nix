#!/usr/bin/env bash 
# https://github.com/elitak/nixos-infect
# OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
# ssh ${OPTS} <HOST> 'bash -s' < nixos-infect

set -x -e -o pipefail


req() {
  type "$1" > /dev/null 2>&1 || which "$1" > /dev/null 2>&1
}


##############################################################################

export USER="root"
export HOME="/root"


##############################################################################

# Use adapted wget if curl is missing
which curl || { \
  curl() {
    eval "wget $(
      (local isStdout=1
      for arg in "$@"; do
        case "$arg" in
          "-o")
            echo "-O";
            isStdout=0
            ;;
          "-O")
            isStdout=0
            ;;
          "-L")
            ;;
          *)
            echo "$arg"
            ;;
        esac
      done;
      [[ $isStdout -eq 1 ]] && echo "-O-"
      )| tr '\n' ' '
    )"
  }; export -f curl; }

# Nix installer tries to use sudo regardless of whether we're already uid 0
#which sudo || { sudo() { eval "$@"; }; export -f sudo; }
# shellcheck disable=SC2174
mkdir -p -m 0755 /nix


##############################################################################

# TODO check currently available swapspace first
swapFile=$(mktemp /tmp/nixos-infect.XXXXX.swp)
dd if=/dev/zero "of=$swapFile" bs=1M count=$((1*1024))
chmod 0600 "$swapFile"
mkswap "$swapFile"
swapon -v "$swapFile"


##############################################################################

# Perform some easy fixups before checking
which dnf && dnf install -y perl-Digest-SHA # Fedora 24
which bzcat || (which yum && yum install -y bzip2) \
            || (which apt-get && apt-get update && apt-get install -y bzip2) \
            || true

[[ "$(whoami)" == "root" ]] || { echo "ERROR: Must run as root"; return 1; }

req curl || req wget || { echo "ERROR: Missing both curl and wget"; return 1; }
req bzcat            || { echo "ERROR: Missing bzcat";              return 1; }
req groupadd         || { echo "ERROR: Missing groupadd";           return 1; }
req useradd          || { echo "ERROR: Missing useradd";            return 1; }
req ip               || { echo "ERROR: Missing ip";                 return 1; }
req awk              || { echo "ERROR: Missing awk";                return 1; }
req cut              || { echo "ERROR: Missing cut";                return 1; }



##############################################################################

# Skip everything if main config already present
# [[ -e /etc/nixos/configuration.nix ]] && return 0

# NB <<"EOF" quotes / $ ` in heredocs, <<EOF does not
mkdir -p /etc/nixos

# Prevent grep for sending error code 1 (and halting execution) when no lines are selected : https://www.unix.com/man-page/posix/1P/grep
IFS=$'\n'; keys=($(grep -vE '^[[:space:]]*(#|$)' /root/.ssh/authorized_keys || [[ $? == 1 ]])) 

cat > /etc/nixos/configuration.nix << EOF
{ pkgs, ... }: {
  imports = [
    ./hardware-configuration.nix
  ];

  boot.cleanTmpDir = true;
  boot.kernelParams = [
    # "console=ttyS0,115200"
    "panic=30" "boot.panic_on_fail"
  ];

  networking = {
    hostName = "$(hostname)";
    firewall.allowPing = false;
  };

  services = {
    openssh = {
      enable = true;
      ports = [ 22 ];
      passwordAuthentication = false;
    };
  };

  users.users.root.openssh.authorizedKeys.keys = [$(for key in "${keys[@]}"; do echo -n "
    \"$key\""; done)
  ];

}
EOF

# If you rerun this later, be sure to prune the filesSystems attr
cat > /etc/nixos/hardware-configuration.nix << EOF
{ ... }:
{
  imports = [ <nixpkgs/nixos/modules/profiles/qemu-guest.nix> ];
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  fileSystems."/" = { 
    device = "/dev/vda1"; 
    fsType = "ext4"; 
  };
  fileSystems."/boot/" = {
    device = "/dev/vda15";
    fsType = "vfat";
  };
}
EOF


##############################################################################
# Add nix build users
# FIXME run only if necessary, rather than defaulting true
groupadd nixbld -g 30000 || true
for i in {1..10}; do useradd -c "Nix build user $i" -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" nixbld$i || true; done

curl https://nixos.org/nix/install | $SHELL

# shellcheck disable=SC1090
source ~/.nix-profile/etc/profile.d/nix.sh

[[ -z "$NIX_CHANNEL" ]] && NIX_CHANNEL="nixos-20.03"
nix-channel --remove nixpkgs
nix-channel --add "https://nixos.org/channels/$NIX_CHANNEL" nixos
nix-channel --update

export NIXOS_CONFIG=/etc/nixos/configuration.nix

nix-env --set \
  -I nixpkgs=$HOME/.nix-defexpr/channels/nixos \
  -f '<nixpkgs/nixos>' \
  -p /nix/var/nix/profiles/system \
  -A system

# Remove nix installed with curl | bash
rm -fv /nix/var/nix/profiles/default*
/nix/var/nix/profiles/system/sw/bin/nix-collect-garbage

# Reify resolv.conf
[[ -L /etc/resolv.conf ]] && mv -v /etc/resolv.conf /etc/resolv.conf.lnk && cat /etc/resolv.conf.lnk > /etc/resolv.conf

# Stage the Nix coup d'Ã©tat
touch /etc/NIXOS
echo etc/nixos                   > /etc/NIXOS_LUSTRATE
echo etc/resolv.conf            >> /etc/NIXOS_LUSTRATE
echo root/.nix-defexpr/channels >> /etc/NIXOS_LUSTRATE

umount /boot/efi || true
umount /boot || true
rm -rf /boot.old
mv -v /boot /boot.old 
mkdir -p /boot/
mount /dev/vda15 /boot

/nix/var/nix/profiles/system/bin/switch-to-configuration boot
/nix/var/nix/profiles/system/sw/bin/bootctl install

##############################################################################
swapoff -a
rm -vf /tmp/nixos-infect.*.swp

reboot
